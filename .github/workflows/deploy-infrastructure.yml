# .github/workflows/deploy-infrastructure.yml
name: Deploy Web Infrastructure

on:
  workflow_dispatch:
    inputs:
      deploy_type:
        description: 'Deployment type'
        required: true
        default: 'update'
        type: choice
        options:
          - update
          - fresh_deploy
      hostname:
        description: 'Custom hostname (optional)'
        required: false
        type: string

  push:
    branches: [main]
    paths:
      - 'compose.yml'
      - '.github/workflows/deploy-infrastructure.yml'

env:
  OCI_CLI_USER: ${{ secrets.OCI_CLI_USER }}
  OCI_CLI_TENANCY: ${{ secrets.OCI_CLI_TENANCY }}
  OCI_CLI_FINGERPRINT: ${{ secrets.OCI_CLI_FINGERPRINT }}
  OCI_CLI_KEY_CONTENT: ${{ secrets.OCI_CLI_KEY_CONTENT }}
  OCI_CLI_REGION: ${{ secrets.OCI_CLI_REGION }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup OCI CLI
        uses: oracle-actions/configure-oci-cli@v1.3.0
        with:
          user: ${{ secrets.OCI_CLI_USER }}
          tenancy: ${{ secrets.OCI_CLI_TENANCY }}
          region: ${{ secrets.OCI_CLI_REGION }}
          fingerprint: ${{ secrets.OCI_CLI_FINGERPRINT }}
          key: ${{ secrets.OCI_CLI_KEY_CONTENT }}

      - name: Generate unique hostname
        id: hostname
        run: |
          if [ -n "${{ github.event.inputs.hostname }}" ]; then
            echo "hostname=${{ github.event.inputs.hostname }}" >> $GITHUB_OUTPUT
          else
            echo "hostname=web-server-$(date +%Y%m%d-%H%M%S)" >> $GITHUB_OUTPUT
          fi

      - name: Deploy new instance (fresh deploy)
        if: github.event.inputs.deploy_type == 'fresh_deploy' || github.event_name == 'workflow_dispatch'
        run: |
          # Create new instance with cloud-init
          oci compute instance launch \
            --availability-domain "${{ secrets.OCI_AVAILABILITY_DOMAIN }}" \
            --compartment-id "${{ secrets.OCI_COMPARTMENT_ID }}" \
            --shape "VM.Standard.A1.Flex" \
            --shape-config '{"memoryInGBs":6,"ocpus":1}' \
            --image-id "${{ secrets.OCI_IMAGE_ID }}" \
            --subnet-id "${{ secrets.OCI_SUBNET_ID }}" \
            --user-data-file cloud-init.yml \
            --display-name "${{ steps.hostname.outputs.hostname }}" \
            --metadata "{
              \"TAILSCALE_AUTH_KEY\":\"${{ secrets.TAILSCALE_AUTH_KEY }}\",
              \"CLOUDFLARE_TUNNEL_TOKEN\":\"${{ secrets.CLOUDFLARE_TUNNEL_TOKEN }}\",
              \"FORMSPREE_ENDPOINT\":\"${{ secrets.FORMSPREE_ENDPOINT }}\",
              \"HOSTNAME\":\"${{ steps.hostname.outputs.hostname }}\"
            }" \
            --wait-for-state RUNNING \
            --max-wait-seconds 300

      - name: Update existing infrastructure (update)
        if: github.event.inputs.deploy_type == 'update' || github.event_name == 'push'
        run: |
          # Find existing instance by tag or name pattern
          INSTANCE_ID=$(oci compute instance list \
            --compartment-id "${{ secrets.OCI_COMPARTMENT_ID }}" \
            --lifecycle-state RUNNING \
            --query "data[?contains(\"display-name\", 'web-server')].id | [0]" \
            --raw-output)
          
          if [ "$INSTANCE_ID" != "null" ] && [ -n "$INSTANCE_ID" ]; then
            echo "Found instance: $INSTANCE_ID"
            
            # Get the public IP
            PUBLIC_IP=$(oci compute instance list-vnics \
              --instance-id "$INSTANCE_ID" \
              --query "data[0].\"public-ip\"" \
              --raw-output)
            
            echo "Instance IP: $PUBLIC_IP"
            
            # Wait for SSH to be available
            echo "Waiting for SSH access..."
            for i in {1..30}; do
              if ssh -o ConnectTimeout=5 -o StrictHostKeyChecking=no opc@$PUBLIC_IP "echo 'SSH Ready'" 2>/dev/null; then
                echo "SSH connection successful"
                break
              fi
              echo "Attempt $i/30 failed, waiting 10 seconds..."
              sleep 10
            done
            
            # Update the running infrastructure
            ssh -o StrictHostKeyChecking=no opc@$PUBLIC_IP << 'EOF'
              cd ~/web-infra
              git pull origin main
              
              # Update environment with latest secrets
              sudo /usr/local/bin/create-env-from-metadata.sh
              
              # Restart services
              systemctl --user restart web-infra-pod.service
              
              # Wait a moment and check status
              sleep 5
              systemctl --user status web-infra-pod.service
              podman pod ps
            EOF
          else
            echo "No running instance found with 'web-server' in the name"
            echo "Use 'fresh_deploy' to create a new instance"
            exit 1
          fi

      - name: Verify deployment
        run: |
          echo "✅ Deployment completed successfully!"
          echo "🔍 Check your Tailscale admin console for the new device"
          echo "🌐 Web server should be accessible via Tailscale network"
          echo "📊 Monitor logs: ssh opc@<instance-ip> 'podman logs web'"

  cleanup-old-instances:
    runs-on: ubuntu-latest
    needs: deploy
    if: github.event.inputs.deploy_type == 'fresh_deploy'
    
    steps:
      - name: Setup OCI CLI
        uses: oracle-actions/configure-oci-cli@v1.3.0
        with:
          user: ${{ secrets.OCI_CLI_USER }}
          tenancy: ${{ secrets.OCI_CLI_TENANCY }}
          region: ${{ secrets.OCI_CLI_REGION }}
          fingerprint: ${{ secrets.OCI_CLI_FINGERPRINT }}
          key: ${{ secrets.OCI_CLI_KEY_CONTENT }}

      - name: List old instances for manual cleanup
        run: |
          echo "🧹 Old instances that may need cleanup:"
          oci compute instance list \
            --compartment-id "${{ secrets.OCI_COMPARTMENT_ID }}" \
            --lifecycle-state RUNNING \
            --query "data[?contains(\"display-name\", 'web-server')].{Name:\"display-name\", ID:id, Created:\"time-created\"}" \
            --output table
          
          echo ""
          echo "💡 To terminate old instances manually:"
          echo "oci compute instance terminate --instance-id <INSTANCE_ID> --force"