# .github/workflows/deploy-infrastructure.yml
name: Deploy Web Infrastructure

on:
  workflow_dispatch:
    inputs:
      deploy_type:
        description: 'Deployment type'
        required: true
        default: 'update'
        type: choice
        options:
          - update
          - fresh_deploy
      hostname:
        description: 'Custom hostname (optional)'
        required: false
        type: string

env:
  OCI_CLI_USER: ${{ secrets.OCI_CLI_USER }}
  OCI_CLI_TENANCY: ${{ secrets.OCI_CLI_TENANCY }}
  OCI_CLI_FINGERPRINT: ${{ secrets.OCI_CLI_FINGERPRINT }}
  OCI_CLI_KEY_CONTENT: ${{ secrets.OCI_CLI_KEY_CONTENT }}
  OCI_CLI_REGION: ${{ secrets.OCI_CLI_REGION }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 45  # Increased to accommodate cloud-init delays
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate unique hostname
        id: hostname
        run: |
          if [ -n "${{ github.event.inputs.hostname }}" ]; then
            echo "hostname=${{ github.event.inputs.hostname }}" >> $GITHUB_OUTPUT
          else
            echo "hostname=web-server-$(date +%Y%m%d-%H%M%S)" >> $GITHUB_OUTPUT
          fi

      - name: Deploy new instance (fresh deploy)
        if: github.event.inputs.deploy_type == 'fresh_deploy' || github.event_name == 'workflow_dispatch'
        uses: oracle-actions/run-oci-cli-command@v1.3.2
        timeout-minutes: 20  # Increased timeout for instance creation
        id: create_instance
        with:
          command: 'compute instance launch --availability-domain "${{ secrets.OCI_AVAILABILITY_DOMAIN }}" --compartment-id "${{ secrets.OCI_COMPARTMENT_ID }}" --shape "VM.Standard.A1.Flex" --shape-config "{\"memoryInGBs\":6,\"ocpus\":1}" --image-id "${{ secrets.OCI_IMAGE_ID }}" --subnet-id "${{ secrets.OCI_SUBNET_ID }}" --user-data-file cloud-init.yml --display-name "${{ steps.hostname.outputs.hostname }}" --metadata "{\"ssh_authorized_keys\":\"${{ secrets.SSH_PUBLIC_KEY }}\",\"HOSTNAME\":\"${{ steps.hostname.outputs.hostname }}\"}" --wait-for-state RUNNING --max-wait-seconds 900'
          silent: false

      - name: Debug environment variables
        if: github.event.inputs.deploy_type == 'update'
        run: |
          echo "=== GitHub Actions Environment ==="
          echo "GITHUB_ACTOR: $GITHUB_ACTOR"
          echo "GITHUB_REPOSITORY: $GITHUB_REPOSITORY"
          
          echo "=== OCI Environment Variables (partial) ==="
          echo "OCI_CLI_USER: ${OCI_CLI_USER:0:25}..."
          echo "OCI_CLI_TENANCY: ${OCI_CLI_TENANCY:0:25}..."
          echo "OCI_CLI_REGION: $OCI_CLI_REGION"
          echo "OCI_CLI_FINGERPRINT: $OCI_CLI_FINGERPRINT"
          
          echo "=== Validating OCID Formats ==="
          if [[ $OCI_CLI_USER == ocid1.user.oc1.* ]]; then
            echo "‚úÖ User OCID format looks correct"
          else
            echo "‚ùå User OCID format looks wrong - should start with 'ocid1.user.oc1.'"
          fi
          
          if [[ $OCI_CLI_TENANCY == ocid1.tenancy.oc1.* ]]; then
            echo "‚úÖ Tenancy OCID format looks correct"  
          else
            echo "‚ùå Tenancy OCID format looks wrong - should start with 'ocid1.tenancy.oc1.'"
          fi
          
          if [[ $OCI_CLI_FINGERPRINT =~ ^[a-f0-9]{2}(:[a-f0-9]{2}){15}$ ]]; then
            echo "‚úÖ Fingerprint format looks correct"
          else
            echo "‚ùå Fingerprint format looks wrong - should be 16 colon-separated hex pairs"
          fi

      - name: Test basic OCI connectivity
        if: github.event.inputs.deploy_type == 'update'
        uses: oracle-actions/run-oci-cli-command@v1.3.2
        timeout-minutes: 2  # Increased slightly
        continue-on-error: true
        id: test_connection
        with:
          command: 'iam region list'
          silent: false

      - name: Debug OCI connection result
        if: github.event.inputs.deploy_type == 'update'
        run: |
          echo "=== OCI Connection Test Result ==="
          if [ "${{ steps.test_connection.outcome }}" = "success" ]; then
            echo "‚úÖ OCI connection successful"
            echo "Regions output: ${{ steps.test_connection.outputs.output }}"
          else
            echo "‚ùå OCI connection failed"
            echo "This suggests an authentication issue with your OCI credentials"
          fi

      - name: Find existing instance (update)
        if: github.event.inputs.deploy_type == 'update'
        uses: oracle-actions/run-oci-cli-command@v1.3.2
        timeout-minutes: 3  # Increased timeout
        id: find_instance
        continue-on-error: true
        with:
          command: 'compute instance list --compartment-id "${{ secrets.OCI_COMPARTMENT_ID }}" --lifecycle-state RUNNING'
          query: 'data[?contains(\"display-name\", `web-server`)].id | [0]'
          silent: false

      - name: Check if instance was found
        if: github.event.inputs.deploy_type == 'update'
        id: check_instance
        run: |
          INSTANCE_ID="${{ steps.find_instance.outputs.output }}"
          if [ "$INSTANCE_ID" = "null" ] || [ -z "$INSTANCE_ID" ] || [ "$INSTANCE_ID" = '""' ]; then
            echo "No running instance found with 'web-server' in the name"
            echo "found=false" >> $GITHUB_OUTPUT
            echo "instance_id=" >> $GITHUB_OUTPUT
          else
            echo "Found instance ID: $INSTANCE_ID"
            echo "found=true" >> $GITHUB_OUTPUT
            echo "instance_id=$INSTANCE_ID" >> $GITHUB_OUTPUT
          fi

      - name: Get instance IP and update (update)
        if: github.event.inputs.deploy_type == 'update' && steps.check_instance.outputs.found == 'true'
        uses: oracle-actions/run-oci-cli-command@v1.3.2
        timeout-minutes: 2
        id: get_instance_ip
        with:
          command: 'compute instance list-vnics --instance-id "${{ steps.check_instance.outputs.instance_id }}"'
          query: 'data[0].\"public-ip\"'

      - name: Setup SSH key for update
        if: github.event.inputs.deploy_type == 'update' && steps.check_instance.outputs.found == 'true'
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          chmod 700 ~/.ssh

      - name: Update existing infrastructure
        if: github.event.inputs.deploy_type == 'update' && steps.check_instance.outputs.found == 'true'
        timeout-minutes: 12  # Increased timeout
        run: |
          PUBLIC_IP="${{ steps.get_instance_ip.outputs.output }}"
          PUBLIC_IP=$(echo $PUBLIC_IP | tr -d '"')
          
          echo "Found instance with IP: $PUBLIC_IP"
          
          # Robust SSH connectivity check
          echo "Waiting for SSH access..."
          SSH_READY=false
          for i in {1..36}; do  # 36 attempts √ó 10 seconds = 6 minutes max
            if timeout 10 ssh -o ConnectTimeout=5 -o StrictHostKeyChecking=no -o BatchMode=yes opc@$PUBLIC_IP "echo 'SSH Ready'" 2>/dev/null; then
              echo "‚úÖ SSH connection successful (attempt $i)"
              SSH_READY=true
              break
            fi
            echo "SSH attempt $i/36 failed, waiting 10 seconds..."
            sleep 10
          done
          
          if [ "$SSH_READY" = "false" ]; then
            echo "‚ùå SSH connection failed after 6 minutes"
            echo "Instance may be down or network issues present"
            exit 1
          fi
          
          # Update the running infrastructure using deploy.sh script
          echo "Updating infrastructure using deploy.sh script..."
          ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 opc@$PUBLIC_IP << 'EOF'
            set -e  # Exit on any error
            
            echo "Updating repository..."
            cd ~/webserver
            git pull origin main || {
              echo "‚ùå Git pull failed"
              exit 1
            }
            
            echo "Creating .env file..."
            cat > .env << 'ENV_EOF'
TAILSCALE_AUTH_KEY=${{ secrets.TAILSCALE_AUTH_KEY }}
CLOUDFLARE_TUNNEL_TOKEN=${{ secrets.CLOUDFLARE_TUNNEL_TOKEN }}
FORMSPREE_ENDPOINT=${{ secrets.FORMSPREE_ENDPOINT }}
APP_PORT=8081
APP_ENV=production
ENV_EOF
            
            chmod 600 .env
            
            echo "Running deploy.sh script..."
            ./scripts/deploy.sh || {
              echo "‚ùå Deploy script failed"
              exit 1
            }
            
            echo "‚úÖ Infrastructure update completed successfully"
          EOF

      - name: Handle no existing instance
        if: github.event.inputs.deploy_type == 'update' && steps.check_instance.outputs.found == 'false'
        run: |
          echo "‚ùå No running instance found with 'web-server' in the name"
          echo "üí° Use 'fresh_deploy' to create a new instance"
          exit 1

      - name: Debug instance creation output
        if: github.event.inputs.deploy_type == 'fresh_deploy' || github.event_name == 'workflow_dispatch'
        id: parse_instance_id
        run: |
          echo "=== Raw create_instance output ==="
          echo '${{ steps.create_instance.outputs.output }}'
          echo ""
          echo "=== Extracting instance ID ==="
          # Remove outer quotes and unescape the JSON string
          CLEAN_JSON=$(echo '${{ steps.create_instance.outputs.output }}' | sed 's/^"//; s/"$//; s/\\"/"/g')
          echo "Cleaned JSON:"
          echo "$CLEAN_JSON"
          echo ""
          INSTANCE_ID=$(echo "$CLEAN_JSON" | jq -r '.data.id')
          echo "Extracted instance ID: $INSTANCE_ID"
          echo "instance_id=$INSTANCE_ID" >> $GITHUB_OUTPUT

      - name: Display new instance info (fresh deploy)
        if: github.event.inputs.deploy_type == 'fresh_deploy' || github.event_name == 'workflow_dispatch'
        uses: oracle-actions/run-oci-cli-command@v1.3.2
        timeout-minutes: 2
        continue-on-error: true
        with:
          command: 'compute instance get --instance-id "${{ steps.parse_instance_id.outputs.instance_id }}"'
          query: 'data.{id: id, name: \"display-name\", state: \"lifecycle-state\", shape: shape, region: region}'

      - name: Get new instance IP (fresh deploy)
        if: github.event.inputs.deploy_type == 'fresh_deploy' || github.event_name == 'workflow_dispatch'
        uses: oracle-actions/run-oci-cli-command@v1.3.2
        timeout-minutes: 3
        id: get_new_ip
        continue-on-error: true
        with:
          command: 'compute instance list-vnics --instance-id "${{ steps.parse_instance_id.outputs.instance_id }}"'
          query: 'data[0].\"public-ip\"'

      - name: Setup SSH key for fresh deploy
        if: github.event.inputs.deploy_type == 'fresh_deploy' || github.event_name == 'workflow_dispatch'
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          chmod 700 ~/.ssh

      - name: Wait for cloud-init and services to be ready
        if: github.event.inputs.deploy_type == 'fresh_deploy' || github.event_name == 'workflow_dispatch'
        timeout-minutes: 20  # Reduced since we're using deploy.sh script
        run: |
          PUBLIC_IP=$(echo '${{ steps.get_new_ip.outputs.output }}' | tr -d '"')
          echo "Waiting for instance to be fully ready at $PUBLIC_IP..."
          
          # Function to check SSH connectivity
          check_ssh() {
            timeout 8 ssh -o ConnectTimeout=5 -o StrictHostKeyChecking=no -o BatchMode=yes opc@$PUBLIC_IP "echo 'SSH Ready'" >/dev/null 2>&1
          }
          
          # Step 1: Wait for SSH (max 5 minutes)
          echo "Step 1: Waiting for SSH access..."
          SSH_ATTEMPTS=30  # 30 * 10 seconds = 5 minutes
          for i in $(seq 1 $SSH_ATTEMPTS); do
            if check_ssh; then
              echo "‚úÖ SSH connection successful (attempt $i/$SSH_ATTEMPTS)"
              break
            fi
            if [ $i -eq $SSH_ATTEMPTS ]; then
              echo "‚ùå SSH connection failed after 5 minutes"
              exit 1
            fi
            echo "SSH attempt $i/$SSH_ATTEMPTS failed, waiting 10 seconds..."
            sleep 10
          done
          
          # Step 2: Wait for cloud-init with simpler, more reliable approach
          echo "Step 2: Waiting for cloud-init to complete..."
          ssh -o StrictHostKeyChecking=no -o ConnectTimeout=15 opc@$PUBLIC_IP << 'CLOUD_INIT_EOF'
          set -e
          
          echo "Checking cloud-init status..."
          
          # Simple approach: use cloud-init status --wait with reasonable timeout
          if timeout 900 cloud-init status --wait; then  # 15 minutes max
            echo "‚úÖ Cloud-init completed successfully"
            cloud-init status --long
          else
            EXIT_CODE=$?
            echo "‚ö†Ô∏è Cloud-init wait exited with code $EXIT_CODE"
            
            if [ $EXIT_CODE -eq 124 ]; then
              echo "‚ùå Timeout: cloud-init exceeded 15 minutes"
              exit 1
            fi
            
            # Check current status
            echo "Current cloud-init status:"
            cloud-init status --long || true
            
            # If status shows done, continue despite timeout
            if cloud-init status | grep -q "status: done"; then
              echo "‚úÖ Cloud-init shows 'done' status, continuing..."
            else
              echo "‚ùå Cloud-init not completed, exiting"
              exit 1
            fi
          fi
          
          # Simple and reliable error check
          echo "Checking for cloud-init errors..."
          if cloud-init status | grep -q "status: error"; then
            echo "‚ùå Cloud-init reported error status"
            cloud-init status --long | head -20
            exit 1
          elif cloud-init status --long | grep -A 20 "errors:" | grep -v "errors: \[\]" | grep -q "\- "; then
            echo "‚ö†Ô∏è Cloud-init completed with some errors:"
            cloud-init status --long | grep -A 10 "errors:" | grep "\- " | head -3
          else
            echo "‚úÖ Cloud-init completed successfully with no errors"
          fi
          CLOUD_INIT_EOF
          
          # Step 3: Deploy web infrastructure using deploy.sh script
          echo "Step 3: Deploying web infrastructure using deploy.sh script..."
          ssh -o StrictHostKeyChecking=no -o ConnectTimeout=15 opc@$PUBLIC_IP << 'WEB_INFRA_EOF'
          set -e
          
          echo "Setting up environment variables..."
          cd ~/webserver
          
          # Create .env file directly
          cat > .env << 'ENV_EOF'
TAILSCALE_AUTH_KEY=${{ secrets.TAILSCALE_AUTH_KEY }}
CLOUDFLARE_TUNNEL_TOKEN=${{ secrets.CLOUDFLARE_TUNNEL_TOKEN }}
FORMSPREE_ENDPOINT=${{ secrets.FORMSPREE_ENDPOINT }}
HOSTNAME=${{ steps.hostname.outputs.hostname }}
APP_PORT=8081
APP_ENV=production
ENV_EOF
          
          chmod 600 .env
          
          echo "Running deploy.sh script..."
          ./scripts/deploy.sh || {
            echo "‚ùå Deploy script failed"
            exit 1
          }
          
          echo "‚úÖ Web infrastructure deployed successfully!"
          WEB_INFRA_EOF

      - name: Verify deployment
        run: |
          echo "‚úÖ Deployment completed successfully!"
          echo ""
          if [ "${{ github.event.inputs.deploy_type }}" = "fresh_deploy" ] || [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "üÜï New instance created:"
            echo "   Instance ID: ${{ steps.parse_instance_id.outputs.instance_id }}"
            echo "   Public IP: ${{ steps.get_new_ip.outputs.output }}"
            echo "   Hostname: ${{ steps.hostname.outputs.hostname }}"
          else
            echo "üîÑ Existing instance updated:"
            echo "   Instance ID: ${{ steps.check_instance.outputs.instance_id }}"
            echo "   Public IP: ${{ steps.get_instance_ip.outputs.output }}"
          fi
          echo ""
          echo "üîç Check your Tailscale admin console for the device"
          echo "üåê Web server will be accessible at http://[tailscale-ip]:8081"
          echo "üìä Monitor with: ssh opc@[instance-ip] 'podman pod ps && podman ps'"

  cleanup-old-instances:
    runs-on: ubuntu-latest
    timeout-minutes: 8  # Increased slightly
    needs: deploy
    if: github.event.inputs.deploy_type == 'fresh_deploy'
    
    env:
      OCI_CLI_USER: ${{ secrets.OCI_CLI_USER }}
      OCI_CLI_TENANCY: ${{ secrets.OCI_CLI_TENANCY }}
      OCI_CLI_FINGERPRINT: ${{ secrets.OCI_CLI_FINGERPRINT }}
      OCI_CLI_KEY_CONTENT: ${{ secrets.OCI_CLI_KEY_CONTENT }}
      OCI_CLI_REGION: ${{ secrets.OCI_CLI_REGION }}
    
    steps:
      - name: List old instances for manual cleanup
        uses: oracle-actions/run-oci-cli-command@v1.3.2
        timeout-minutes: 3
        with:
          command: 'compute instance list --compartment-id "${{ secrets.OCI_COMPARTMENT_ID }}" --lifecycle-state RUNNING'
          query: 'data[?contains(\"display-name\", `web-server`)].{Name:\"display-name\", ID:id, Created:\"time-created\"}'
          silent: false

      - name: Cleanup instructions
        run: |
          echo ""
          echo "üßπ Old instances listed above may need cleanup"
          echo "üí° To terminate old instances:"
          echo "   Use the OCI Console or run:"
          echo "   oci compute instance terminate --instance-id <INSTANCE_ID> --force"