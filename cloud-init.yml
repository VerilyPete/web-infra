#cloud-config

# Remove unnecessary packages first to speed up updates
bootcmd:
  - dnf remove -y libvirt* qemu* spice* plymouth* kernel-tools perf tuned dmraid kexec-tools crash abrt* libreport* sendmail postfix xinetd telnet-server rsh-server ypbind ypserv tftp tftp-server talk talk-server finger finger-server gcc gcc-c++ make automake autoconf libtool bison flex gdb strace ltrace man man-pages info texinfo || true
  - dnf clean all

package_update: true
package_upgrade: true

packages:
  - podman
  - buildah
  - skopeo
  - git
  - curl
  - wget
  - tmux
  - oci-utils

write_files:
  - path: /etc/containers/registries.conf
    content: |
      [registries.search]
      registries = ['docker.io', 'registry.fedoraproject.org', 'registry.access.redhat.com', 'registry.centos.org', 'quay.io', 'ghcr.io']
      [registries.insecure]
      registries = []
      [registries.block]
      registries = []
    owner: root:root
    permissions: '0644'

  - path: /etc/containers/storage.conf
    content: |
      [storage]
      driver = "overlay"
      runroot = "/run/containers/storage"
      graphroot = "/var/lib/containers/storage"
      [storage.options]
      additionalimagestores = []
      [storage.options.overlay]
      mountopt = "nodev,metacopy=on"
      size = "20G"
    owner: root:root
    permissions: '0644'

  - path: /etc/containers/containers.conf
    content: |
      [containers]
      log_driver = "journald"
      log_size_max = -1
      pids_limit = 2048
      [engine]
      cgroup_manager = "systemd"
      events_logger = "journald"
      runtime = "crun"
      [network]
      network_backend = "netavark"
    owner: root:root
    permissions: '0644'

  - path: /usr/local/bin/create-env-from-metadata.sh
    content: |
      #!/bin/bash
      set -e
      INSTANCE_ID=$(curl -s http://169.254.169.254/opc/v1/instance/id 2>/dev/null || echo "unknown")
      REGION=$(curl -s http://169.254.169.254/opc/v1/instance/region 2>/dev/null || echo "unknown")
      DEFAULT_HOSTNAME="web-server-${INSTANCE_ID:0:8}"
      TAILSCALE_KEY="${TAILSCALE_AUTH_KEY:-}"
      CLOUDFLARE_TOKEN="${CLOUDFLARE_TUNNEL_TOKEN:-}"
      FORMSPREE_ENDPOINT="${FORMSPREE_ENDPOINT:-}"
      HOSTNAME_VAR="${HOSTNAME:-$DEFAULT_HOSTNAME}"
      cat > /home/opc/web-infra/.env << EOF
      TAILSCALE_AUTH_KEY=$TAILSCALE_KEY
      HOSTNAME=$HOSTNAME_VAR
      CLOUDFLARE_TUNNEL_TOKEN=$CLOUDFLARE_TOKEN
      FORMSPREE_ENDPOINT=$FORMSPREE_ENDPOINT
      APP_PORT=8081
      APP_ENV=production
      OCI_INSTANCE_ID=$INSTANCE_ID
      OCI_REGION=$REGION
      EOF
      chown opc:opc /home/opc/web-infra/.env
      chmod 600 /home/opc/web-infra/.env
    owner: root:root
    permissions: '0755'

  - path: /usr/local/bin/deploy-web-infra.sh
    content: |
      #!/bin/bash
      set -e
      cd /home/opc
      chown opc:opc /home/opc
      if [ ! -d "web-infra" ]; then
        sudo -u opc git clone https://github.com/VerilyPete/web-infra.git
      else
        cd web-infra && sudo -u opc git pull && cd ..
      fi
      cd web-infra
      chown -R opc:opc /home/opc/web-infra
      /usr/local/bin/create-env-from-metadata.sh
      sudo -u opc podman pull --quiet k8s.gcr.io/pause:3.9
      sudo -u opc podman pull --quiet ghcr.io/verilypete/webserver:latest
      sudo -u opc podman pull --quiet tailscale/tailscale:latest
      sudo -u opc podman pull --quiet cloudflare/cloudflared:latest
      if [ -f ".env" ]; then
        source .env
        if [ ! -z "$TAILSCALE_AUTH_KEY" ] && [[ "$TAILSCALE_AUTH_KEY" == tskey-* ]]; then
          (sleep 10 && sudo -u opc systemctl --user start web-infra-pod.service) &
        fi
      fi
    owner: root:root
    permissions: '0755'

  - path: /home/opc/.config/systemd/user/web-infra-pod.service
    content: |
      [Unit]
      Description=Web Infrastructure Pod
      Wants=network-online.target
      After=network-online.target
      RequiresMountsFor=%t/containers
      [Service]
      Type=forking
      Restart=on-failure
      TimeoutStopSec=70
      WorkingDirectory=%h/web-infra
      Environment=PODMAN_SYSTEMD_UNIT=%n
      ExecStartPre=/usr/bin/podman pod create --name web-infra-pod --publish 8081:8081 --replace
      ExecStart=/usr/bin/bash -c 'cd %h/web-infra && /usr/local/bin/start-web-pod.sh'
      ExecStop=/usr/bin/podman pod stop web-infra-pod
      ExecStopPost=/usr/bin/podman pod rm -f web-infra-pod
      [Install]
      WantedBy=default.target
    owner: opc:opc
    permissions: '0644'

  - path: /usr/local/bin/start-web-pod.sh
    content: |
      #!/bin/bash
      set -e
      if [ -f ".env" ]; then
        set -a && source .env && set +a
      else
        echo "ERROR: .env file not found" && exit 1
      fi
      podman run -d --name web-pod --pod web-infra-pod --restart unless-stopped k8s.gcr.io/pause:3.9
      podman run -d --name web --pod web-infra-pod --restart unless-stopped ghcr.io/verilypete/webserver:latest
      if [ ! -z "$TAILSCALE_AUTH_KEY" ] && [ "$TAILSCALE_AUTH_KEY" != "tskey-auth-xxxxxxxxx" ]; then
        podman run -d --name tailscale --pod web-infra-pod --privileged --restart unless-stopped \
          --volume tailscale-data:/var/lib/tailscale:z --volume /dev/net/tun:/dev/net/tun --cap-add NET_ADMIN \
          --env TS_AUTHKEY="$TAILSCALE_AUTH_KEY" --env TS_HOSTNAME="$HOSTNAME" --env TS_STATE_DIR=/var/lib/tailscale \
          tailscale/tailscale:latest
      fi
      if [ ! -z "$CLOUDFLARE_TUNNEL_TOKEN" ] && [ "$CLOUDFLARE_TUNNEL_TOKEN" != "your-tunnel-token-here" ]; then
        podman run -d --name cloudflared --pod web-infra-pod --restart unless-stopped \
          --env TUNNEL_TOKEN="$CLOUDFLARE_TUNNEL_TOKEN" cloudflare/cloudflared:latest tunnel --no-autoupdate run
      fi
    owner: root:root
    permissions: '0755'

  - path: /usr/local/bin/system-setup.sh
    content: |
      #!/bin/bash
      set -e
      systemctl disable --now bluetooth.service cups.service avahi-daemon.service NetworkManager-wait-online.service ModemManager.service wpa_supplicant.service accounts-daemon.service udisks2.service upower.service rtkit-daemon.service packagekit.service dnf-makecache.timer fstrim.timer systemd-tmpfiles-clean.timer || true
      systemctl mask plymouth-start.service plymouth-read-write.service plymouth-quit-wait.service plymouth-quit.service || true
      loginctl enable-linger opc
      if ! grep -q "^opc:" /etc/subuid; then echo "opc:100000:65536" >> /etc/subuid; fi
      if ! grep -q "^opc:" /etc/subgid; then echo "opc:100000:65536" >> /etc/subgid; fi
    owner: root:root
    permissions: '0755'

  - path: /etc/sysctl.d/99-podman-optimization.conf
    content: |
      vm.swappiness=10
      vm.dirty_ratio=15
      vm.dirty_background_ratio=5
      vm.max_map_count=262144
      net.core.rmem_max=16777216
      net.core.wmem_max=16777216
      net.ipv4.tcp_rmem=4096 87380 16777216
      net.ipv4.tcp_wmem=4096 65536 16777216
      net.ipv4.tcp_congestion_control=bbr
      fs.file-max=65536
      fs.inotify.max_user_watches=524288
    owner: root:root
    permissions: '0644'

  - path: /etc/systemd/journald.conf.d/podman.conf
    content: |
      [Journal]
      SystemMaxUse=500M
      SystemKeepFree=1G
      SystemMaxFileSize=100M
      RuntimeMaxUse=200M
      RuntimeKeepFree=500M
      RuntimeMaxFileSize=50M
      MaxRetentionSec=1week
    owner: root:root
    permissions: '0644'

  - path: /usr/local/bin/podman-cleanup.sh
    content: |
      #!/bin/bash
      for user in $(getent passwd | grep -E '/home|/var/lib' | cut -d: -f1); do
        if id "$user" &>/dev/null; then
          sudo -u "$user" podman container prune -f 2>/dev/null || true
          sudo -u "$user" podman image prune -af --filter "until=24h" 2>/dev/null || true
          sudo -u "$user" podman volume prune -f 2>/dev/null || true
          sudo -u "$user" podman system prune -af 2>/dev/null || true
        fi
      done
      podman container prune -f; podman image prune -af --filter "until=24h"; podman volume prune -f; podman system prune -af
      buildah rmi --prune; journalctl --vacuum-time=7d; journalctl --vacuum-size=500M
    owner: root:root
    permissions: '0755'

  - path: /home/opc/.config/containers/containers.conf
    content: |
      [containers]
      log_driver = "journald"
      pids_limit = 1024
      [engine]
      cgroup_manager = "systemd"
      events_logger = "journald"
      runtime = "crun"
      [network]
      network_backend = "netavark"
    owner: opc:opc
    permissions: '0644'

runcmd:
  - sleep 10
  - mkdir -p /opt/app /home/opc/.config/containers /home/opc/.config/systemd/user /etc/systemd/journald.conf.d
  - chown -R opc:opc /opt/app /home/opc/.config
  - |
    for script in /usr/local/bin/*.sh; do
      if [ -f "$script" ]; then chmod +x "$script"; fi
    done
  - |
    if [ -x /usr/local/bin/system-setup.sh ]; then
      /usr/local/bin/system-setup.sh
    fi
  - |
    if [ -f /etc/sysctl.d/99-podman-optimization.conf ]; then
      sysctl -p /etc/sysctl.d/99-podman-optimization.conf
    fi
  - systemctl daemon-reload && systemctl restart systemd-journald
  - firewall-cmd --permanent --remove-service=cockpit || true
  - firewall-cmd --permanent --remove-service=dhcpv6-client || true
  - firewall-cmd --permanent --add-port=8081/tcp
  - firewall-cmd --reload
  - (crontab -l 2>/dev/null; echo "0 2 * * * /usr/local/bin/podman-cleanup.sh >> /var/log/podman-cleanup.log 2>&1") | crontab -
  - |
    if [ -x /usr/local/bin/deploy-web-infra.sh ]; then
      /usr/local/bin/deploy-web-infra.sh
    fi
  - sudo -u opc systemctl --user daemon-reload
  - |
    if [ -f /home/opc/.config/systemd/user/web-infra-pod.service ]; then
      sudo -u opc systemctl --user enable web-infra-pod.service
    fi
  - rm -rf /var/cache/dnf/* /tmp/* /var/tmp/*
  - truncate -s 0 /var/log/messages /var/log/secure /var/log/cron
  - dnf update -y oci-utils

final_message: |
  Web infrastructure deployed! Access at http://[instance-ip]:8081
  Manual start: sudo -u opc systemctl --user start web-infra-pod